
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
%



x = Input_Vector;  % Vectores que representan a las muestras (vectores de características).
                 % Notar que se tienen como vectores columna.
t = Target_Vector; % Vectores con los "targets", que identifican a qué clase pertenecen las 
                 % muestras. Para tres clases, notar que los targets tienen la forma
                 % [1; 0; 0] - clase 1  Podría ser [1; -1; -1], según la no linealidad usada
                 % [0; 1; 0] - clase 2  Podría ser [-1; 1; -1], según la no linealidad usada
                 % [0; 0; 1] - clase 3  Podría ser [-1; -1; 1], según la no linealidad usada

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 10;
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);  % Se pasan los datos por la red.
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y); 
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
view(net)

%% Ejemplos adicionales de uso de la red para clasificar

x_prueba = x(:,randi(size(x,2)));  % un dato al azar
y_prueba = net(x_prueba);
clase_prueba = vec2ind(y_prueba)   % contiene la etiqueta asignada


xs_prueba = x(:,randperm(size(x,2), 10));  % 10 datos al azar
ys_prueba = net(xs_prueba);
clases_prueba = vec2ind(ys_prueba) % contiene las etiquetas asignadas
